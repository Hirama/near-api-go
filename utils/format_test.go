package utils

import (
	"testing"
)

var conversions = []struct {
	yocto string
	human string
}{
	{"9999999999496439737500000000000", "9,999,999.9994964397375"},
	{"999999999496439737500000000000", "999,999.9994964397375"},
	{"99999999496439737500000000000", "99,999.9994964397375"},
	{"9999999496439737500000000000", "9,999.9994964397375"},
	{"999999496439737500000000000", "999.9994964397375"},
	{"99999496439737500000000000", "99.9994964397375"},
	{"1000000000000000000000000000000", "1,000,000"},
	{"100000000000000000000000000000", "100,000"},
	{"10000000000000000000000000000", "10,000"},
	{"1000000000000000000000000000", "1,000"},
	{"100000000000000000000000000", "100"},
	{"10000000000000000000000000", "10"},
	{"1000000000000000000000000", "1"},
	{"100000000000000000000000", "0.1"},
	{"10000000000000000000000", "0.01"},
	{"1000000000000000000000", "0.001"},
	{"100000000000000000000", "0.0001"},
	{"10000000000000000000", "0.00001"},
	{"1000000000000000000", "0.000001"},
	{"100000000000000000", "0.0000001"},
	{"10000000000000000", "0.00000001"},
	{"1000000000000000", "0.000000001"},
	{"100000000000000", "0.0000000001"},
	{"10000000000000", "0.00000000001"},
	{"1000000000000", "0.000000000001"},
	{"100000000000", "0.0000000000001"},
	{"10000000000", "0.00000000000001"},
	{"1000000000", "0.000000000000001"},
	{"100000000", "0.0000000000000001"},
	{"10000000", "0.00000000000000001"},
	{"1000000", "0.000000000000000001"},
	{"100000", "0.0000000000000000001"},
	{"10000", "0.00000000000000000001"},
	{"1000", "0.000000000000000000001"},
	{"100", "0.0000000000000000000001"},
	{"10", "0.00000000000000000000001"},
	{"1", "0.000000000000000000000001"},
	{"0", "0"},
}

func TestFormatNearAmount(t *testing.T) {
	for _, conv := range conversions {
		res, err := FormatNearAmount(conv.yocto)
		if err != nil {
			t.Error(err)
			continue
		}
		if res != conv.human {
			t.Errorf("FormatNearAmount(\"%s\") returned \"%s\" (want \"%s\")",
				conv.yocto, res, conv.human)
		}
	}
}

func TestParseNearAmount(t *testing.T) {
	for _, conv := range conversions {
		res, err := ParseNearAmount(conv.human)
		if err != nil {
			t.Error(err)
			continue
		}
		if res != conv.yocto {
			t.Errorf("ParseNearAmount(\"%s\") returned \"%s\" (want \"%s\")",
				conv.human, res, conv.yocto)
		}
	}
}

func TestFormatWithCommas(t *testing.T) {
	tests := []struct {
		have string
		want string
	}{
		{"0", "0"},
		{"10", "10"},
		{"100", "100"},
		{"1000", "1,000"},
		{"10000", "10,000"},
		{"100000", "100,000"},
		{"1000000", "1,000,000"},
		{"10000000", "10,000,000"},
		{"100000000", "100,000,000"},
		{"1000000000", "1,000,000,000"},
		{"1234567890", "1,234,567,890"},
	}
	for _, test := range tests {
		res := formatWithCommas(test.have)
		if res != test.want {
			t.Errorf("formatWithCommas(\"%s\") returned \"%s\" (want \"%s\")",
				test.have, res, test.want)
		}
	}
}
